{"version":3,"sources":["Components/SortingVisualization/SortingVisualization.module.css","Components/SortingAlgorithm/SortingAlgorithm.js","Components/SortingVisualization/SortingVisualization.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","quickSort","quickSortHelper","items","left","right","animation","index","console","log","pivot","pivotIdx","swap","partition","input","indexA","indexB","temp","SortingVisualization","state","data","value","curValue","barcolor","handleChangeStart","handleChange","setState","handleChangeComplete","this","resetArray","min","max","Newdata","random","sortingAlgorithm","arrayBars","document","getElementsByClassName","classes","arrayBar","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","newHeight","height","condition","OneValue","TwoValue","pivotStyle","animResult","newHeightOne","newHeightTwo","arr","nums","HelperInsertionSort","speed","barOne","barVal","helperselectionSort","swapped","len","tmp","helperBubbleSort","ANIMATIONSPEED","barSmallerVal","barBiggerVal","barSmaller","barBigger","barSmallerStyle","barBiggerStyle","widthOfBar","className","arrayContent","map","idx","key","width","content","marginBottom","textAlign","paddingLeft","onChangeStart","onChange","onChangeComplete","marginTop","onClick","marginRight","mergeSort","marginLeft","selectionSort","insertionSort","bubbelSort","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22221e8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContent\":\"SortingVisualization_arrayContent__2lO9I\",\"arrayBar\":\"SortingVisualization_arrayBar__OeecN\",\"content\":\"SortingVisualization_content__K9ujc\"};","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n\r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  \r\nexport function quickSort(array){\r\n  const animations = [];\r\n  // if (array.length <= 1) return array;\r\n  quickSortHelper(array, 0, array.length-1, animations)\r\n  return animations\r\n}\r\n\r\n  function quickSortHelper(items, left, right, animation) {\r\n      var index;\r\n      if (items.length > 1) {\r\n          console.log(animation)\r\n          // animation.push([left, right, false])\r\n\r\n          index = partition(items, left, right, animation); //index returned from partition\r\n          if (left < index - 1) { //more elements on the left side of the pivot\r\n              // animation.push([left, index-1, false])\r\n              quickSortHelper(items, left, index - 1, animation);\r\n          }\r\n          if (index < right) { //more elements on the right side of the pivot\r\n              // animation.push([index, right,false])\r\n              quickSortHelper(items, index, right, animation);\r\n          }\r\n      }\r\n      return items;\r\n  }\r\n\r\n\r\n  function partition(items, left, right, animation) {\r\n    var pivot   = items[Math.floor((right + left) / 2)], //middle element\r\n        i       = left, //left pointer\r\n        j       = right; //right pointer\r\n    let pivotIdx = Math.floor((right + left) / 2);\r\n    while (i <= j) {\r\n        while (items[i] < pivot) {\r\n            animation.push([i,j,false,pivotIdx, items[i], items[j]])\r\n            i++;\r\n        }\r\n        while (items[j] > pivot) {\r\n            animation.push([i,j,false,pivotIdx, items[i], items[j]])\r\n            j--;\r\n        }\r\n        if (i <= j) {\r\n            animation.push([j,i, true, pivotIdx, items[j], items[i]])\r\n            swap(items, i, j); //sawpping two elements\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    return i;\r\n  }\r\n\r\n  function swap(input, indexA, indexB) {\r\n    const temp = input[indexA]\r\n\r\n    input[indexA] = input[indexB]\r\n    input[indexB] = temp\r\n  }\r\n\r\nexport function selectionSort(arr){\r\n  let animation = [];\r\n  helperselectionSort(arr, animation) \r\n  return animation\r\n}\r\n\r\nexport function helperselectionSort(arr, animation) {\r\n\r\n    for (var i = 0; i < arr.length; i++) {\r\n\r\n        let min = i; //  storing the index of minimum element\r\n\r\n        for (var j = i + 1; j < arr.length; j++) {\r\n            animation.push([min,j, false, arr[min], arr[j]])\r\n            if (arr[min] > arr[ j ]) {\r\n                animation.push([min, j, false, arr[min], arr[j]])\r\n                min = j; // updating the index of minimum element\r\n            }\r\n        }\r\n\r\n        if (i !== min) {\r\n            animation.push([min, i, true, arr[min],arr[i] ])\r\n            let temp = arr[ i ];\r\n            arr[ i ] = arr[min];\r\n            arr[min] = temp;\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nexport function insertionSort(arr){\r\n  let animation = [];\r\n\r\n  HelperInsertionSort(arr, animation);\r\n  return animation\r\n\r\n}\r\n\r\nfunction HelperInsertionSort(nums, animation) {\r\n  for (let i = 1; i < nums.length; i++) {\r\n    let j = i - 1\r\n    let temp = nums[i]\r\n    // animation.push([j, i, \"false\", nums[j], nums[i] ])\r\n    while (j >= 0 && nums[j] > temp) {\r\n      animation.push([j+1, j, \"true\", nums[j+1], nums[j]])\r\n      nums[j + 1] = nums[j]\r\n      j--\r\n    }\r\n    animation.push([j+1, i, \"swap\", nums[j+1], temp])\r\n    nums[j+1] = temp\r\n  }\r\n  return nums\r\n}\r\n\r\nexport function bubbleSort(arr){\r\n  let animation = [];\r\n  helperBubbleSort(arr, animation);\r\n  return animation;\r\n} \r\n\r\n  // function swaping(arr, first_Index, second_Index){\r\n  //   var temp = arr[first_Index];\r\n  //   arr[first_Index] = arr[second_Index];\r\n  //   arr[second_Index] = temp;\r\n  // }\r\n\r\n  // function HelperbubbleSort(arr, animation){\r\n\r\n  //   var len = arr.length,\r\n  //       // i, j, stop;\r\n\r\n  //   for (let i=0; i < len; i++){\r\n  //       for (let j=0, stop=len-i; j < stop; j++){\r\n  //           animation.push([j , j+1, false]);\r\n  //           if (arr[j] > arr[j+1]){\r\n  //               animation.push([j+1, j, true]);\r\n  //               swaping(arr, j, j+1);\r\n  //           }\r\n  //       }\r\n  //   }\r\n\r\n  //   return arr;\r\n  // }\r\n\r\n\r\n\r\n// function helperBubbleSort(records, animation){\r\n//   for (var i=0; i<records.length; i++){\r\n//     for (var j=0; j<records.length; j++){\r\n//         animation.push([i,j,false]);\r\n//         if (records[i] > records[j]){\r\n//             animation.push([j,i,true])\r\n//             var temp = records[i];\r\n//             records[i] = records[j];\r\n//             records[j] = temp;\r\n//         }   \r\n//       }    \r\n//   }\r\n//   return records;\r\n// }\r\n\r\n\r\nfunction helperBubbleSort(arr, animation){\r\n  let swapped;\r\n  let len = arr.length;\r\n  do {\r\n    swapped = false;\r\n    for (let i = 0; i < len-1; i++) {\r\n      animation.push([i, i+1, false, arr[i],arr[i+1] ])\r\n      if (arr[i] > arr[i + 1]) {\r\n        animation.push([i, i+1, true, arr[i], arr[i+1]])\r\n        let tmp = arr[i];\r\n        arr[i] = arr[i + 1];\r\n        arr[i + 1] = tmp;\r\n        swapped = true;\r\n      }\r\n    }\r\n    len--;\r\n  } while (swapped);\r\n  return arr;\r\n};\r\n  // function helperBubbleSort(arr, animation){\r\n  //   for (let i = 0; i < arr.length; i++){\r\n  //     for(let j = 0; j < arr.length-i-1; j++){\r\n  //       animation.push([j, j+1, false])\r\n  //       if(arr[j] > arr[j+1]){\r\n  //         animation.push([j+1, j , true])\r\n  //         swapping(arr, j, j+1)\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   return arr\r\n  // }\r\n\r\n  // function swapping(arr, IdxOne, IdxTwo){\r\n  //   let temp = arr[IdxOne];\r\n  //   arr[IdxOne] = arr[IdxTwo];\r\n  //   arr[IdxTwo] = temp;\r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport classes from './SortingVisualization.module.css';\r\nimport Slider from 'react-rangeslider';\r\nimport 'react-rangeslider/lib/index.css'\r\nimport * as sortingAlgorithm from '../SortingAlgorithm/SortingAlgorithm';\r\n\r\n\r\nfunction randomNumber(min, max) {  \r\n    return Math.floor(Math.random() * (max - min) + min); \r\n  }  \r\n\r\n\r\n  const ANIMATION_SPEED_MS = 25;\r\n\r\n  // Change this value for the number of bars (value) in the array.\r\n  // const NUMBER_OF_ARRAY_BARS = 310;\r\n  \r\n  // This is the main color of the array bars.\r\n  // const PRIMARY_COLOR = '#162447' //'#01BFFF'; \r\n  \r\n  // This is the color of array bars that are being compared throughout the animations.\r\n  // const SECONDARY_COLOR = '#2DF009'/*'turquoise';*/ \r\n  \r\n\r\nclass SortingVisualization extends Component {\r\n    state ={\r\n        data: [],\r\n        value: 5,\r\n        curValue: 5,\r\n        barcolor: '#162447'\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n    \r\n    resetArray(){\r\n        const Newdata = [];\r\n        const value = this.state.curValue;\r\n        for (let i = 0; i<value; i++){\r\n            Newdata.push(randomNumber(10, 800))\r\n        }\r\n\r\n        this.setState({value:value, data:Newdata, barcolor: '#162447'})\r\n    }\r\n\r\n    \r\n    handleChangeStart = () =>{\r\n        console.log('Change event Started')\r\n    };\r\n\r\n    handleChange = value => {\r\n        this.setState({curValue:value})\r\n    };\r\n\r\n    handleChangeComplete = () => {\r\n        console.log('Change event completed')\r\n      };\r\n\r\n\r\n    mergeSort(){\r\n        const animations = sortingAlgorithm.getMergeSortAnimations(this.state.data);\r\n        // console.log(animations[0])\r\n        console.log(animations.length)\r\n          for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(classes.arrayBar);\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n              const [barOneIdx, barTwoIdx] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              const barTwoStyle = arrayBars[barTwoIdx].style;\r\n              setTimeout(() => {\r\n                barOneStyle.backgroundColor = '#01BFFF' ;\r\n                barTwoStyle.backgroundColor = '#01BFFF' ;\r\n              }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n              setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n              }, i * ANIMATION_SPEED_MS);\r\n            }\r\n          }\r\n      }\r\n    \r\n    \r\n\r\n    quickSort(){\r\n      const animations= sortingAlgorithm.quickSort(this.state.data);\r\n      for (let i = 0 ; i< animations.length; i++){\r\n        const arrayBars = document.getElementsByClassName(classes.arrayBar);\r\n        const[barOneIdx, barTwoIdx, condition, pivot, OneValue, TwoValue] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const pivotStyle = arrayBars[pivot].style;\r\n        if (condition){\r\n          setTimeout(() => {\r\n          const animResult = animations[i];\r\n          const OneValue = animResult[4];\r\n          const TwoValue = animResult[5];\r\n          // const [barOneIdx, barTwoIdx, condition, pivot, OneValue, TwoValue] = animations[i]\r\n          const newHeightOne = OneValue //arr[barOneIdx]\r\n          const newHeightTwo = TwoValue //arr[barTwoIdx]\r\n          barOneStyle.backgroundColor = '#162447';\r\n          barTwoStyle.backgroundColor = '#162447';\r\n          pivotStyle.backgroundColor = '#b6eb7a';//'#438a5e';//'#2DF009';\r\n          barOneStyle.height = `${newHeightTwo}px`;\r\n          barTwoStyle.height = `${newHeightOne}px`;\r\n          setTimeout(() => {\r\n            pivotStyle.backgroundColor = '#01BFFF';\r\n            barOneStyle.backgroundColor = '#01BFFF';\r\n            barTwoStyle.backgroundColor = '#01BFFF';\r\n          }, 10);\r\n          // pivotStyle.backgroundColor = '#01BFFF';\r\n          }, i* ANIMATION_SPEED_MS);\r\n        }\r\n        else{\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${OneValue}px`;\r\n          barTwoStyle.height = `${TwoValue}px`;\r\n          barOneStyle.backgroundColor = '#01BFFF';\r\n          barTwoStyle.backgroundColor = '#01BFFF';\r\n          // pivotStyle.backgroundColor = '#01BFFF';\r\n        }, i * ANIMATION_SPEED_MS);\r\n        }\r\n      }\r\n      \r\n    }\r\n  \r\n    insertionSort(){\r\n      const animation = sortingAlgorithm.insertionSort(this.state.data);\r\n      const speed = animation.length > 20? 3: 30;\r\n      for (let i = 0 ; i< animation.length; i++){\r\n        const arrayBars = document.getElementsByClassName(classes.arrayBar);\r\n        const animResult = animation[i];\r\n        const barTwoIdx = animResult[0];\r\n        const barOneIdx = animResult[1];\r\n        const condition = animResult[2];\r\n        // const[barTwoIdx, barOneIdx, condition, barTwoValue, barOneValue] = animation[i];\r\n        if (condition === 'true'){\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const barTwoStyle = arrayBars[barTwoIdx].style;  \r\n          setTimeout(() => {  \r\n          const animations = animation[i];\r\n          const barOneValue = animations[4];\r\n          // const [barOneIdx, barTwoIdx, condition, barTwoValue, barOneValue] = animation[i]\r\n          const newHeight = barOneValue; //taking the hight from index value considered as smallest to replace\r\n          barOneStyle.backgroundColor = '#2DF009'; //'#01BFFF'; \r\n          barTwoStyle.backgroundColor = '#01BFFF'; //'#162447';\r\n          barTwoStyle.height = `${newHeight}px`;\r\n          }, i* speed);\r\n        }\r\n\r\n        else if (condition === 'swap'){\r\n          // const barTwoStyle = arrayBars[barTwoIdx].style;  \r\n          setTimeout(() => { \r\n            const animations = animation[i];\r\n            const barOne = animations[0];\r\n            const Two = animations[4];\r\n            // const [barOne, barTwo, condition, One, Two ] = animation[i];\r\n            const currBarStyle = arrayBars[barOne].style;\r\n            const barVal = Two;\r\n            currBarStyle.height = `${barVal}px`; //Swaping the height of index Two with index one on comparision\r\n          } ,i* speed);\r\n        }\r\n\r\n        else{\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;  \r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = '#01BFFF';//'#162447';\r\n          barTwoStyle.backgroundColor = '#01BFFF';//'#162447';\r\n        }, i * speed);\r\n        }\r\n       \r\n      }\r\n     \r\n    }\r\n\r\n    selectionSort(){\r\n      const animations= sortingAlgorithm.selectionSort(this.state.data);\r\n      const speed = animations.length > 20? 3: 100;\r\n      const arr = this.state.data;\r\n      for (let i = 0 ; i< animations.length; i++){\r\n        const arrayBars = document.getElementsByClassName(classes.arrayBar);\r\n        const animation = animations[i];\r\n        const barOneIdx = animation[0];\r\n        const barTwoIdx = animation[1];\r\n        const condition = animation[2];\r\n        // const[barOneIdx, barTwoIdx, condition, OneValue, TwoValue] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        console.log(barOneStyle)\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        if (condition){\r\n          setTimeout(() => {\r\n          const animation = animations[i];\r\n          const barOneIdx = animation[0];\r\n          const barTwoIdx = animation[1];\r\n          // const [barOneIdx, barTwoIdx, condition, OneValue, TwoValue] = animations[i]\r\n          const newHeightOne = arr[barOneIdx]\r\n          const newHeightTwo = arr[barTwoIdx]\r\n          barOneStyle.backgroundColor = '#01BFFF';\r\n          barTwoStyle.backgroundColor = '#01BFFF';\r\n          barOneStyle.height = `${newHeightOne}px`;\r\n          barTwoStyle.height = `${newHeightTwo}px`;\r\n          }, i* speed);\r\n         \r\n        }\r\n        else{\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = '#162447';\r\n          barTwoStyle.backgroundColor = '#162447'; \r\n        }, i * speed);\r\n        }\r\n       \r\n      }\r\n    }\r\n\r\n    bubbelSort(){\r\n      const animations = sortingAlgorithm.bubbleSort(this.state.data);\r\n      const ANIMATIONSPEED = this.state.data.length > 20 ? 5: 45;\r\n      for (let i = 0 ; i< animations.length; i++){\r\n        const arrayBars = document.getElementsByClassName(classes.arrayBar);\r\n        const[barSmallerVal, barBiggerVal, condition, barSmaller, barBigger] = animations[i]; \r\n        const barSmallerStyle = arrayBars[barSmallerVal].style; \r\n        const barBiggerStyle = arrayBars[barBiggerVal].style; \r\n        if (condition){\r\n          setTimeout(() => {\r\n          // const [valOne, valTwo, condition] = animations[i]\r\n          barSmallerStyle.backgroundColor = '#01BFFF'; \r\n          barBiggerStyle.backgroundColor = '#162447';  \r\n          barSmallerStyle.height = `${barBigger}px`;\r\n          barBiggerStyle.height = `${barSmaller}px`; \r\n          barSmallerStyle.backgroundColor = '#162447';\r\n          barBiggerStyle.backgroundColor = '#01BFFF';\r\n          }, i * ANIMATIONSPEED);\r\n        }\r\n        else{\r\n        setTimeout(() => {\r\n          barSmallerStyle.height = `${barSmaller}px`;\r\n          barBiggerStyle.height = `${barBigger}px`; \r\n          barSmallerStyle.backgroundColor ='#01BFFF'; //'#162447';\r\n          barBiggerStyle.backgroundColor = '#01BFFF'; //#162447';\r\n        }, i* ANIMATIONSPEED);\r\n        }\r\n      }\r\n      const arrayBars = document.getElementsByClassName(classes.arrayBar);\r\n      console.log(arrayBars)\r\n      \r\n    }\r\n    render(){\r\n        const {curValue, value, barcolor} = this.state\r\n\r\n        const widthOfBar = 70/value;\r\n\r\n        \r\n        return(\r\n            <>\r\n            <div className= {classes.arrayContent} >\r\n                {this.state.data.map((value, idx) => (\r\n                <div\r\n                    className= {classes.arrayBar} \r\n                    key = {idx} \r\n                    style={{height: `${value}px`, width:`${widthOfBar}%`, backgroundColor: barcolor }}>    \r\n               </div>\r\n            ))}\r\n            </div>\r\n            <div className= {classes.content}>\r\n                <h1 style={{marginBottom: '80px'}}>Sorting Visualization</h1>\r\n                <h4 style={{textAlign:'left', paddingLeft: '5px'}}> Select Data Points</h4>\r\n                <Slider\r\n                    min= {2} \r\n                    max= {100} \r\n                    value = {curValue}\r\n                    onChangeStart={this.handleChangeStart}\r\n                    onChange={this.handleChange}\r\n                    onChangeComplete={this.handleChangeComplete}/>\r\n                <div>{curValue}</div>\r\n                <button style = {{marginTop: '50px', marginBottom: '50px'}} onClick= {() => this.resetArray()}><span> Generate Array  </span> </button>\r\n                <h4 style = {{textAlign: 'left', paddingLeft: '5px'}}> Select Algorithm to Start: </h4>\r\n                <button style = {{marginRight: '5px'}} onClick= {() => this.mergeSort()}> Merge Sort </button>\r\n                <button onClick= {() => this.quickSort()}> Quick Sort  </button>\r\n                <button style = {{marginLeft: '5px'}} onClick= {() => this.selectionSort()}> Selection Sort </button>\r\n                <button style = {{marginTop: '5px', marginRight: '5px'}} onClick= {() => this.insertionSort()}> Insertion Sort </button>\r\n                <button onClick= {() => this.bubbelSort()}> Bubble Sort </button>\r\n            </div>\r\n                    \r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default SortingVisualization;\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualization from './Components/SortingVisualization/SortingVisualization'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualization> </SortingVisualization>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}